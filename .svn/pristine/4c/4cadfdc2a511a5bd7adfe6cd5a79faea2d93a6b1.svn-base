package com.handmade.cn.action.product;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.miemiedev.mybatis.paginator.domain.PageList;
import com.handmade.cn.bean.product.ProductInfoBean;
import com.handmade.cn.conf.AppConfig;
import com.handmade.cn.entity.dianzan.Dianzanlog;
import com.handmade.cn.entity.material.MaterialInfo;
import com.handmade.cn.entity.product.ProductCategory;
import com.handmade.cn.entity.product.ProductInfo;
import com.handmade.cn.service.dianzan.DianzanService;
import com.handmade.cn.service.material.MaterialSerivice;
import com.handmade.cn.service.product.ProductCategoryService;
import com.handmade.cn.service.product.ProductService;
import com.handmade.cn.utils.JsonMapper;
import com.handmade.cn.utils.ParamUtils;
import com.handmade.cn.web.action.BaseController;

@Controller
@RequestMapping("admin/product")
//@AdminUserLogin
public class ProductAction extends BaseController{
	
	File tempPathFile;
	
	@Autowired
	private ProductService productService;
	@Autowired
	private MaterialSerivice materialSerivice;
	@Autowired
	private ProductCategoryService productCategoryService;
	@Autowired
	private DianzanService dianzanService;
	
	@RequestMapping("toAddProduct")
	public String toAddProduct(Model model,HttpServletRequest request,String codeQuality){
//		System.out.println("length"+id.length);
		String materialName="";
//		for (int i = 0; i < id.length; i++) {
//			
//		}
//		model.addAttribute("materialName", materialName);
		Integer[] ids = ParamUtils.getIntegerParameters(request, "id", null);
		List<MaterialInfo> materials = materialSerivice.findByIds(ids);
		if (ParamUtils.getFilteredParameters(request, "id", 0, "") != null) {
			materialName+=JsonMapper.toJsonStr(ParamUtils
					.getFilteredParameters(request, "id", 0, ""));
		}
		System.out.println("Name:"+materialName);
		model.addAttribute("materialName",materialName);
		model.addAttribute("materials",materials);
		model.addAttribute("codeQuality", codeQuality);
		List<ProductCategory> productCategories= productCategoryService.findAll();
		Map<String, Object> maps = materialSerivice.findAllMaterials();
		model.addAttribute("types", productCategories);
		model.addAttribute("maps", maps);
		return "admin/product/toaddproduct";
	}
	
	@ResponseBody
	@RequestMapping("checkQuality")
	public Object checkQuality(Double[] dosages,Double[] unitQuality,String codeQuality){
		Double preSum=Double.parseDouble(codeQuality);
		Double sum=0.0;
		if (dosages.length>0&&unitQuality.length>0) {
			for (int i = 0; i < unitQuality.length; i++) {
				sum+=dosages[i]*unitQuality[i];
			}
		}
		System.out.println("sum:"+sum);
		if (preSum*0.95<=sum&&sum<=preSum*1.05) {
			return suc("符合预计");
		}else {
			return fail("请检查配料数量，特别是单位质量较大的耗材");
		}
		
	}
	
	@RequestMapping("addProduct")
	public String addProduct(ProductInfo productInfo,HttpServletRequest request) throws Exception{
		SimpleDateFormat df = new SimpleDateFormat("HHmmss");
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(4096); // 设置缓冲区大小，这里是4kb
		factory.setRepository(tempPathFile);// 设置缓冲区目录

		ServletFileUpload upload = new ServletFileUpload(factory);
		upload.setHeaderEncoding("UTF-8");
		upload.setSizeMax(10485760); // 设置最大文件尺寸，这里是4MB
		List<FileItem> items = upload.parseRequest(request);// 得到所有的文件
		Iterator<FileItem> i = items.iterator();
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> list = new ArrayList<String>();
		while (i.hasNext()) {
			FileItem fi = (FileItem) i.next();
			String fieldName = fi.getFieldName();
			if (fi.isFormField()) {  
		        //如果是普通表单字段  
	            String value = fi.getString();  
	            map.put(fieldName, new String(value.getBytes("ISO8859_1"), "utf-8"));
		    }else{
		    	File fullFile = new File(fi.getName());
				String fileNameNew = df.format(new Date())+fullFile.getName();
				File savedFile = new File(AppConfig.getAppMap().get("imagepath"), fileNameNew);
				fi.write(savedFile);
				if(fieldName.equals("file_upload") && fileNameNew.length()>6){
					list.add(fileNameNew);
				}else{
					map.put(fieldName, fileNameNew);
				}
		    }
		}
		productInfo = JsonMapper.readValue(map, ProductInfo.class);
		if(!list.isEmpty() && list.size()>0){
			productInfo.setImage(JsonMapper.toJsonStr(list));
		}
		
		productService.saveOrUpdateProduct(productInfo);
		return "redirect:/admin/productInfo/list/p1";//suc("保存成功");
	}
	
	@RequestMapping("toEditProduct/{id}")
	public String toEditProduct(Model model,HttpServletRequest request,@PathVariable Integer id){
		ProductInfo productInfo = productService.findById(id);
		List<ProductCategory> productCategories= productCategoryService.findAll();
		model.addAttribute("types", productCategories);
		model.addAttribute("productInfo",productInfo);
		String images=productInfo.getImage();
		List<String> list=new ArrayList<String>();
		if(StringUtils.isNotEmpty(images)){
			images=images.replace("\"", "").replace("[", "").replace("]", "");
			String [] arr=images.split(",");
			for (int i = 0; i < arr.length; i++) {
				if (arr[i].length()>0) {
					list.add(arr[i]);
				}
			}
			model.addAttribute("imagePaths", list);
		}
		return "admin/product/toeditproduct";
	}
	
	@ResponseBody
	@RequestMapping("deleteProduct")
	public Object deleteProduct(Integer id){
		Integer n=productService.deleteByPk(id);
		if (n==null) {
			return fail("删除失败");
		}else {
			return suc("删除成功");
		}
	}
	
	@RequestMapping("rankOfProduct/p{pageNo}")
	public String rankOfProduct(ProductInfoBean productInfoBean,Model model,@PathVariable Integer pageNo){
		productInfoBean.setPageNo(pageNo);
		productInfoBean.setPageSize(8);
		model.addAttribute("page", pageNo+1);
		PageList<ProductInfo> productInfos= productService.orderByGreatNum(productInfoBean);
		model.addAttribute("products", productInfos);
		return "handmade/pad/ranking";
	}
	@ResponseBody
	@RequestMapping("loadMore/p{page}")
	public Object loadMore(ProductInfoBean productInfoBean,Model model,@PathVariable Integer page){
		productInfoBean.setPageNo(page);
		productInfoBean.setPageSize(8);
		PageList<ProductInfo> productInfos= productService.orderByGreatNum(productInfoBean);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("products", productInfos);
		map.put("page", page+1);
		return suc("加载成功", map);
	}
	
	
	@RequestMapping("toProductDetail")
	public String  toProductDetail(Integer id,Model model){
		ProductInfo productInfo = productService.findById(id);
		String images=productInfo.getImage();
		List<String> list=new ArrayList<String>();
		images=images.replace("\"", "").replace("[", "").replace("]", "");
		String [] arr=images.split(",");
		for (int i = 0; i < arr.length; i++) {
			if (arr[i].length()>0) {
				list.add(arr[i]);
			}
		}
		List<MaterialInfo> materialInfos = new ArrayList<MaterialInfo>();
		String materialIds =productInfo.getMaterials();
		materialIds=materialIds.replace("\"", "").replace("[", "").replace("]", "").replace("\\", "");
		String [] arr2=materialIds.split(",");
		for (int i = 0; i < arr2.length; i++) {
			if (arr2[i].length()>0) {
				MaterialInfo materialInfo = materialSerivice.selectByPrimaryKey(Integer.parseInt(arr2[i]));
				materialInfos.add(materialInfo);
			}
		}
		model.addAttribute("images", list);
		model.addAttribute("materialInfos", materialInfos);
		model.addAttribute("productInfo", productInfo);
		return "handmade/pad/product-detail";
	}
	
	@ResponseBody
	@RequestMapping("toPraise")
	public Object toPraise(Integer id,String openId){
		ProductInfo productInfo = productService.selectByPrimaryKey(id);
		//openId =(String) request.getSession().getAttribute("openId");
		openId="123";
		Dianzanlog dianzanlog= dianzanService.findByProductId(id);
		if (dianzanlog!=null && openId.equals(dianzanlog.getOpenid())) {
			return fail("您已对该作品点赞过",null);
		}
		Integer n= productInfo.getGreatNum();
		productInfo.setGreatNum(n+1);
		Boolean flag=dianzanService.toPrise(productInfo,id,openId);
		if (flag) {
			return suc("点赞成功");
		}else {
			return fail("点赞失败");
		}
		
	}

}
